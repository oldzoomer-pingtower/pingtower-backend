spring:
  application:
    name: statistics

  # Server Configuration
  server:
    port: ${SERVER_PORT:8083}

  # Cassandra Configuration
  cassandra:
    contact-points: ${CASSANDRA_CONTACT_POINTS:localhost}
    port: ${CASSANDRA_PORT:9042}
    keyspace-name: ${CASSANDRA_KEYSPACE_NAME:pingtower_statistics}
    local-datacenter: ${CASSANDRA_LOCAL_DATACENTER:datacenter1}
    schema-action: CREATE_IF_NOT_EXISTS
    create-keyspace: true

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0

  # Spring Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "cache:"

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    consumer:
      group-id: statistics-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: ru.oldzoomer.pingtower.statistics.dto
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # OAuth2 / Keycloak Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/realms/pingtower}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/realms/pingtower/protocol/openid-connect/certs}

# Logging Configuration
logging:
  level:
    ru.oldzoomer.pingtower.statistics: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.cassandra: INFO
    org.springframework.data.redis: INFO