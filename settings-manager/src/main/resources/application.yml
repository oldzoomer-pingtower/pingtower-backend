spring:
  application:
    name: settings-manager

  # PostgreSQL Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/pingtower_settings}
    username: ${DATABASE_USERNAME:pingtower_user}
    password: ${DATABASE_PASSWORD:pingtower_password}
    driver-class-name: org.postgresql.Driver

  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 0

  # Spring Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "cache:"

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    consumer:
      group-id: settings-manager-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: ru.oldzoomer.pingtower.settings_manager.dto
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # OAuth2 / Keycloak Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/realms/pingtower}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:80/realms/pingtower/protocol/openid-connect/certs}

# Server Configuration
server:
  port: ${SERVER_PORT:8084}

# Logging Configuration
logging:
  level:
    ru.oldzoomer.pingtower.settings_manager: INFO