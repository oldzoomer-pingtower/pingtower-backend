spring:
  application:
    name: notificator

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    consumer:
      group-id: notificator-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: ru.oldzoomer.pingtower.notificator.dto
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # Email Configuration
  mail:
    host: ${MAIL_HOST:smtp.example.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:user@example.com}
    password: ${MAIL_PASSWORD:password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "cache:"

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}

  # OAuth2 / Keycloak Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:80/realms/pingtower}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:80/realms/pingtower/protocol/openid-connect/certs}

# Notification Configuration
notificator:
  grouping:
    interval: 3000
  escalation:
    enabled: true
  telegram:
    bot:
      token: ${TELEGRAM_BOT_TOKEN:your-telegram-bot-token}
  webhook:
    url: ${WEBHOOK_URL:https://example.com/webhook}

# Server Configuration
server:
  port: ${SERVER_PORT:8082}