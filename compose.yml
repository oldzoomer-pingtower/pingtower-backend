# PingTower Docker Compose Configuration
#
# Сервисы:
# - redis: Кэширование данных
# - redpanda: Очереди сообщений (Kafka)
# - postgres: Основная база данных
# - cassandra: База данных для статистики
# - keycloak: Сервис аутентификации и авторизации
# - pingtower-*: Микросервисы системы
#
# Требуемые переменные окружения:
# DOMAIN - домен приложения
# POSTGRES_USER, POSTGRES_PASSWORD - доступ к PostgreSQL
# REDIS_PASSWORD - пароль Redis
# KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD - учетные данные администратора Keycloak
#
# Использование:
# 1. Создать .env файл с переменными
# 2. Запустить: docker compose up -d
#
# Версия: 1.1

services:
  redis:
    image: redis:alpine
    container_name: pingtower-redis
    networks:
      - pingtower
    healthcheck:
      test: redis-cli ping || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-pingtower}

  cassandra:
    image: cassandra
    container_name: pingtower-cassandra
    networks:
      - pingtower
    restart: unless-stopped
    environment:
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5

  redpanda:
    image: redpandadata/redpanda
    container_name: pingtower-redpanda
    restart: unless-stopped
    hostname: redpanda
    networks:
      - pingtower
    deploy:
      resources:
        limits:
          memory: 1G
    command:
      - redpanda start
        --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
        --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://redpanda:9092
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:alpine
    container_name: pingtower-postgres
    networks:
      - pingtower
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-pingtower}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pingtower}
      - POSTGRES_DB=${POSTGRES_DB:-pingtower}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER:-pingtower} || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: pingtower-keycloak
    networks:
      - pingtower
    restart: unless-stopped
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-pingtower}
      - KC_DB_USERNAME=${POSTGRES_USER:-pingtower}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD:-pingtower}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_HOSTNAME=${DOMAIN:-localhost}
      - KC_HTTP_ENABLED=true
      - KC_HTTP_PORT=8080
      - KC_PROXY=edge
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Сервис проверки доступности систем
  # Основные зависимости: PostgreSQL, Redis, Kafka
  pingtower-pinger:
    image: pingtower/pinger:latest
    container_name: pingtower-pinger
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: pinger
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - pingtower
    ports:
      - "8081:8080"
    restart: unless-stopped
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pingtower}
      - JWT_ISSUER_URI=http://keycloak:8080/realms/pingtower
      - JWT_JWK_SET_URI=http://keycloak:8080/realms/pingtower/protocol/openid-connect/certs
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=pingtower
      - DB_USERNAME=${POSTGRES_USER:-pingtower}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-pingtower}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 120s
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_started

  # Сервис управления уведомлениями
  # Основные зависимости: PostgreSQL, Redis, Kafka
  pingtower-notificator:
    image: pingtower/notificator:latest
    container_name: pingtower-notificator
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: notificator
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - pingtower
    ports:
      - "8082:8080"
    restart: unless-stopped
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pingtower}
      - JWT_ISSUER_URI=http://keycloak:8080/realms/pingtower
      - JWT_JWK_SET_URI=http://keycloak:8080/realms/pingtower/protocol/openid-connect/certs
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=pingtower
      - DB_USERNAME=${POSTGRES_USER:-pingtower}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-pingtower}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 120s
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_started

  # Сервис статистики и агрегации данных
  # Основные зависимости: PostgreSQL, Redis, Kafka, Cassandra
  pingtower-statistics:
    image: pingtower/statistics:latest
    container_name: pingtower-statistics
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: statistics
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - pingtower
    ports:
      - "8084:8080"
    restart: unless-stopped
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pingtower}
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_LOCAL_DATACENTER=datacenter1
      - JWT_ISSUER_URI=http://keycloak:8080/realms/pingtower
      - JWT_JWK_SET_URI=http://keycloak:8080/realms/pingtower/protocol/openid-connect/certs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      start_period: 120s
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      keycloak:
        condition: service_started

networks:
  pingtower:
    driver: bridge

volumes:
  postgres_storage:
  redpanda_data:
  cassandra_data:
  keycloak_data: